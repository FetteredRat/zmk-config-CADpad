/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp PLUS      &kp MINUS  &kp N9        &kp N8        &kp N7          &kp N7        &kp N8        &kp N9        &kp MINUS  &kp PLUS      &none
&none  &kp ASTERISK  &kp SLASH  &kp NUMBER_6  &kp N5        &kp NUMBER_4    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH  &kp ASTERISK  &none
&none  &kp N0        &kp EQUAL  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL  &kp N0        &none
                                &mo 2         &mo 1         &kp PERIOD      &kp PERIOD    &mo 1         &mo 2
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp S  &kp O              &kp C             &kp R         &kp L           &kp L         &kp R         &kp C             &kp O              &kp S  &none
&none  &kp I  &kp Q              &kp LEFT_BRACKET  &kp B         &kp N           &kp N         &kp B         &kp LEFT_BRACKET  &kp Q              &kp I  &trans
&none  &kp E  &kp RIGHT_BRACKET  &bt BT_SEL 2      &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &kp RIGHT_BRACKET  &kp E  &none
                                 &bt BT_CLR        &trans        &kp ENTER       &kp RET       &trans        &bt BT_CLR
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR   &kp PRCNT    &soft_off  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL   &trans    &trans  &trans    &trans     &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT   &trans    &trans  &trans    &trans     &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                              &trans    &kp SPACE  &kp DEL      &trans     &trans     &trans
            >;
        };
    };
};
